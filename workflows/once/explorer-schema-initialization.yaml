apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: cubedash-init-
  namespace: argo-workflows
spec:
  entrypoint: cubedash-initialization
  serviceAccountName: argo-workflows-executor
  podGC:
    strategy: OnWorkflowSuccess
  templates:
    - name: cubedash-initialization
      steps:
        - - name: init-cubedash
            template: cubedash-init

    - name: cubedash-init
      script:
        image: opendatacube/explorer:3.0.0
        resources:
          requests:
            memory: 500Mi
            cpu: 1000m
          limits:
            memory: 1Gi
            cpu: 2000m
        command: [bash]
        source: |
          set -e

          echo "=== Cubedash PostGIS Initialization ==="
          echo "Database: $DB_DATABASE | Host: $DB_HOSTNAME"

          # Setup SSL for RDS
          echo "Setting up SSL connection for RDS..."
          curl -s -o /tmp/rds-ca.pem https://truststore.pki.rds.amazonaws.com/ap-southeast-3/ap-southeast-3-bundle.pem
          export PGSSLMODE=verify-ca
          export PGSSLROOTCERT=/tmp/rds-ca.pem

          # Decode base64 encoded password
          echo "Decoding database password..."
          DECODED_PASSWORD=$(echo "$DB_PASSWORD_ENCODED" | base64 -d)

          # URL encode password for connection string
          URL_ENCODED_PASSWORD=$(printf '%s' "$DECODED_PASSWORD" | python3 -c "import urllib.parse, sys; print(urllib.parse.quote(sys.stdin.read().strip()))")

          export DB_PASSWORD="$DECODED_PASSWORD"

          # Create datacube configuration file with PostGIS driver (same as datacube step)
          echo "Creating datacube configuration with PostGIS driver..."
          mkdir -p ~/.datacube
          cat > ~/.datacube.conf << EOF
          [default]
          db_database: ${DB_DATABASE}
          db_hostname: ${DB_HOSTNAME}
          db_username: ${DB_USERNAME}
          db_password: ${DB_PASSWORD}
          db_port: ${DB_PORT}
          index_driver: postgis

          [datacube]
          db_database: ${DB_DATABASE}
          db_hostname: ${DB_HOSTNAME}
          db_username: ${DB_USERNAME}
          db_password: ${DB_PASSWORD}
          db_port: ${DB_PORT}
          index_driver: postgis
          EOF

          # Set up datacube configuration with SSL and URL-encoded password
          export ODC_POSTGIS_DB_URL="postgresql://${DB_USERNAME}:${URL_ENCODED_PASSWORD}@${DB_HOSTNAME}:${DB_PORT}/${DB_DATABASE}?sslmode=verify-ca&sslrootcert=/tmp/rds-ca.pem"


          # Verify datacube system is ready with PostGIS
          echo "Checking datacube system with PostGIS driver..."
          datacube system check

          # Initialize Cubedash (will use the same PostGIS configuration)
          echo "Running cubedash initialization with PostGIS backend..."
          cubedash-gen --init

          cubedash-gen --all

          echo "Cubedash PostGIS initialization completed!"

        env:
          - name: DB_HOSTNAME
            valueFrom:
              secretKeyRef:
                name: db-secret
                key: db_address
          - name: DB_PORT
            value: "5432"
          - name: DB_DATABASE
            value: "odc"
          - name: DB_USERNAME
            valueFrom:
              secretKeyRef:
                name: db-secret
                key: username
          - name: DB_PASSWORD_ENCODED
            valueFrom:
              secretKeyRef:
                name: db-secret
                key: password
          - name: ODC_POSTGIS_INDEX_DRIVER
            value: "postgis"
          - name: FLASK_DEBUG
            value: "1"
          - name: CUBEDASH_DEFAULT_TIMEZONE
            value: "Asia/Jakarta"
