---
apiVersion: batch/v1
kind: Job
metadata:
  name: db-user-creation-job
  namespace: database
spec:
  backoffLimit: 3
  ttlSecondsAfterFinished: 300
  template:
    spec:
      containers:
        - name: postgres-client
          image: alpine:3.22
          command:
            - /bin/sh
            - -c
            - |
              set -e  # Exit on any error

              echo "Starting database user creation job..."

              # Install packages
              echo "Installing required packages..."
              apk add --no-cache bash curl postgresql-client

              # Check if PGPASSWORD needs base64 decoding
              if echo "$PGPASSWORD" | base64 -d >/dev/null 2>&1; then
                  DECODED_PGPASSWORD=$(echo "$PGPASSWORD" | base64 -d)
                  echo "Admin password was base64 encoded, decoded successfully"
              else
                  DECODED_PGPASSWORD="$PGPASSWORD"
                  echo "Admin password is already plain text"
              fi
              export PGPASSWORD="$DECODED_PGPASSWORD"

              # User passwords - assume they are plain text
              echo "Using user passwords as plain text (no base64 decoding)"

              # Download SSL cert with retry logic
              echo "Downloading SSL certificate..."
              for i in 1 2 3; do
                  if curl -o /tmp/rds-ca.pem https://truststore.pki.rds.amazonaws.com/ap-southeast-3/ap-southeast-3-bundle.pem; then
                      echo "SSL certificate downloaded successfully"
                      break
                  else
                      echo "SSL certificate download attempt $i failed"
                      if [ $i -eq 3 ]; then
                          echo "Failed to download SSL certificate after 3 attempts"
                          exit 1
                      fi
                      sleep 5
                  fi
              done

              export PGSSLMODE=verify-ca
              export PGSSLROOTCERT=/tmp/rds-ca.pem

              # Test database connection first
              echo "Testing database connection..."
              if ! psql -h "$DB_HOST" -U "$DB_ADMIN_USER" -d postgres -c "SELECT version();" >/dev/null; then
                  echo "ERROR: Cannot connect to database"
                  exit 1
              fi
              echo "Database connection successful"

              # Copy script to writable location and run it
              echo "Preparing and executing user creation script..."
              cp /scripts/create_users.sh /tmp/create_users.sh
              chmod +x /tmp/create_users.sh

              # Execute the script
              if /tmp/create_users.sh; then
                  echo "User creation script completed successfully"
                  # Create completion marker for potential health checks
                  touch /tmp/job-completed
                  echo "Job completed successfully at $(date)"
              else
                  echo "User creation script failed"
                  exit 1
              fi
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-password
                  key: password
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: db-password
                  key: db_address
            - name: DB_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: db-password
                  key: username
            - name: DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  name: db-password
                  key: db_name
            - name: ARGO_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: argo
                  key: password
            - name: JUPYTERHUB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jupyterhub
                  key: password
            - name: GRAFANA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana
                  key: password
            - name: STACREAD_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: stacread
                  key: password
            - name: STAC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: stac
                  key: password
            - name: ODCREAD_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: odcread
                  key: password
            - name: ODC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: odc
                  key: password
          volumeMounts:
            - name: script
              mountPath: /scripts
              readOnly: true
          resources:
            requests:
              memory: "64Mi"
              cpu: "100m"
            limits:
              memory: "128Mi"
              cpu: "200m"
      volumes:
        - name: script
          configMap:
            name: db-user-creation-script
            defaultMode: 0755
      restartPolicy: OnFailure
      # Run job on system nodegroup
      nodeSelector:
        karpenter.sh/controller: "true"
      tolerations:
        - key: "CriticalAddonsOnly"
          operator: "Exists"
          effect: "NoSchedule"
