apiVersion: v1
kind: ConfigMap
metadata:
  name: hub-profile-config
  namespace: jupyterhub
data:
  profiles.py: |
    from tornado import web
    import os

    async def get_user_groups(self, user):
        """Extract user groups from AWS Cognito authentication state"""
        try:
            # Retrieve user authentication info
            auth_state = await user.get_auth_state()
            self.log.info(f"Auth state for {user.name}: {auth_state}")

            # Extract Cognito groups from the token
            if auth_state and 'oauth_user' in auth_state:
                cognito_info = auth_state['oauth_user']
                groups = cognito_info.get('cognito:groups', [])
            elif auth_state and 'cognito:groups' in auth_state:
                groups = auth_state['cognito:groups']
            else:
                self.log.warning(f"Could not find cognito:groups for user {user.name}")
                groups = []

            self.log.info(f"User {user.name} belongs to groups: {groups}")
            return groups

        except Exception as e:
            self.log.error(f"Error retrieving groups for {user.name}: {e}")
            return []

    async def custom_options_form(self):
        """Generate dynamic profile options based on user groups"""
        self.log.info(f"Generating profiles for user: {self.user.name}")

        # Define profile configurations
        profiles_config = {
            "base": [
                {
                    "display_name": "Standard Instance",
                    "description": "2 CPUs, 12GB RAM, 10GB storage",
                    "slug": "standard",
                    "default": True,
                    "kubespawner_override": {
                        "cpu_guarantee": 2,
                        "cpu_limit": 2,
                        "mem_guarantee": "12G",
                        "mem_limit": "12G",
                        "storage_capacity": "10Gi",
                        "node_selector": {
                            "karpenter.sh/nodepool": "default",
                            "karpenter.sh/capacity-type": "spot"
                        }
                    }
                }
            ],
            "moderate": [
                {
                    "display_name": "Medium Instance",
                    "description": "4 CPUs, 18GB RAM, 20GB storage",
                    "slug": "medium",
                    "kubespawner_override": {
                        "cpu_guarantee": 4,
                        "cpu_limit": 4,
                        "mem_guarantee": "16G",
                        "mem_limit": "16G",
                        "storage_capacity": "20Gi",
                        "node_selector": {
                            "karpenter.sh/nodepool": "default",
                            "karpenter.sh/capacity-type": "spot"
                        }
                    }
                }
            ],
            "power": [
                {
                    "display_name": "Large Instance",
                    "description": "8 CPUs, 32GB RAM, 20GB storage",
                    "slug": "large",
                    "kubespawner_override": {
                        "cpu_guarantee": 8,
                        "cpu_limit": 8,
                        "mem_guarantee": "32G",
                        "mem_limit": "32G",
                        "storage_capacity": "20Gi",
                        "node_selector": {
                            "karpenter.sh/nodepool": "default",
                            "karpenter.sh/capacity-type": "on-demand"
                        }
                    }
                }
            ],
            "gpu": [
                {
                    "display_name": "GPU Instance",
                    "description": "4 CPUs, 16GB RAM, 20GB storage, 1 NVIDIA GPU",
                    "slug": "gpu",
                    "kubespawner_override": {
                        "cpu_guarantee": 4,
                        "cpu_limit": 4,
                        "mem_guarantee": "16G",
                        "mem_limit": "16G",
                        "storage_capacity": "20Gi",
                        "extra_resource_limits": {
                            "nvidia.com/gpu": "1"
                        },
                        "extra_resource_guarantees": {
                            "nvidia.com/gpu": "1"
                        },
                        "tolerations": [
                            {
                                "key": "nvidia.com/gpu",
                                "operator": "Exists",
                                "effect": "NoSchedule"
                            }
                        ]
                    }
                }
            ],
            "admin": [
                {
                    "display_name": "Breaks stuffs here! ðŸ§ª ",
                    "description": "2 CPUs, 12GB RAM - For testing new images",
                    "slug": "testing",
                    "kubespawner_override": {
                        "cpu_guarantee": 2,
                        "cpu_limit": 2,
                        "mem_guarantee": "12G",
                        "mem_limit": "12G",
                        "image": "686410905891.dkr.ecr.ap-southeast-3.amazonaws.com/piksel-core:jupyter-v20250808-132239",
                        "default_url": "/lab/tree/notebooks/README.md"
                    }
                }
            ]
        }

        # Define group hierarchy and access levels
        group_access = {
            "admin": ["base", "moderate", "power", "gpu", "admin"],
            "gpu-users": ["base", "moderate", "power", "gpu"],
            "power-users": ["base", "moderate", "power"],
            "moderate-users": ["base", "moderate"],
            "regular-users": ["base"]
        }       

        try:
            # Get user groups from Cognito
            user_groups = await get_user_groups(self, self.user)

            # Default user type and accessible profiles
            user_type = "regular-user"
            accessible_profiles = set(["base"])

            # Check groups in hierarchy order
            if 'admin' in user_groups:
                user_type = "admin"
                accessible_profiles.update(group_access["admin"])
            elif 'gpu-users' in user_groups:
                user_type = "gpu-user"
                accessible_profiles.update(group_access["gpu-users"])
            elif 'power-users' in user_groups:
                user_type = "power-user"
                accessible_profiles.update(group_access["power-users"])
            elif 'moderate-users' in user_groups:
                user_type = "moderate-user"
                accessible_profiles.update(group_access["moderate-users"])
            
            # Build final profile list
            self.profile_list = []
            for profile_type in ["base", "moderate", "power", "gpu", "admin"]:
                if profile_type in accessible_profiles:
                    self.profile_list.extend(profiles_config[profile_type])

            self.log.info(f"User {self.user.name} ({user_type}) has access to: {list(accessible_profiles)}")

            self.extra_labels = {
                "user-type": user_type,
                "cognito-groups": "-".join(user_groups),
                "accessible-profiles": "-".join(sorted(accessible_profiles))
            }

            return self._options_form_default()

        except Exception as e:
            self.log.error(f"Error in custom_options_form for {self.user.name}: {e}")
            # Fallback to base profiles if there's an error
            self.profile_list = profiles_config["base"]
            return self._options_form_default()


    c.Spawner.debug = True
    c.JupyterHub.log_level = "DEBUG"
    c.LocalProcessSpawner.debug = True

    # Set cookies to less than 5 day (5 day is the Cognito default cookie expiry)
    c.JupyterHub.cookie_max_age_days = 4.5
    c.JupyterHub.tornado_settings["cookie_options"] = dict(expires_days=4.50)

    # Override options_form
    c.KubeSpawner.options_form = custom_options_form
