apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: grafana-alloy
spec:
  interval: 15m
  chart:
    spec:
      chart: alloy
      version: "1.1.1"
      sourceRef:
        kind: HelmRepository
        name: grafana-charts
  install:
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
  values:
    controller:
      type: "daemonset"
      daemonset:
        tolerations:
          - effect: NoSchedule
            operator: Exists
          - key: "CriticalAddonsOnly"
            operator: "Exists"
    alloy:
      configMap:
        create: true
        content: |
          logging {
            level  = "info"
            format = "logfmt"
          }

          // 1. Discover Kubernetes pods
          discovery.kubernetes "pods" {
            role = "pod"
          }

          // 2. Scrape logs from discovered pods
          // Forward them to the relabeling component first.
          loki.source.kubernetes "pods" {
            targets    = discovery.kubernetes.pods.targets
            forward_to = [loki.relabel.pods.receiver]
          }

          // 3. Relabel the logs to create the correct labels
          loki.relabel "pods" {
            // Forward the relabeled logs to the JSON processing stage
            forward_to = [loki.process.pods.receiver]

            // Rule to create the 'namespace' label
            rule {
              source_labels = ["__meta_kubernetes_namespace"]
              target_label  = "namespace"
            }
            
            // Rule to create the 'app' label
            rule {
              source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name", "__meta_kubernetes_pod_label_app"]
              target_label  = "app"
            }
            
            // Rule to create the 'pod' label
            rule {
              source_labels = ["__meta_kubernetes_pod_name"]
              target_label  = "pod"
            }

            // Rule to create the 'container' label
            rule {
              source_labels = ["__meta_kubernetes_pod_container_name"]
              target_label  = "container"
            }
          }

          // 4. Process the log content to parse it as JSON
          // This block now has the correct syntax.
          loki.process "pods" {
            // Forward the final, processed logs to Loki
            forward_to = [loki.write.default.receiver]

            stage.json {
              expressions = {
                // This extracts the "level" field from the JSON log
                // and makes it available as an internal label.
                level = "level",
              }
            }
          }

          // 5. Send the final, enriched log to Loki
          loki.write "default" {
            endpoint {
              url = "http://loki-gateway.monitoring.svc.cluster.local/loki/api/v1/push"
            }
          }
