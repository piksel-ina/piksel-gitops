apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: grafana-alloy
spec:
  interval: 15m
  chart:
    spec:
      chart: alloy
      version: "1.1.1"
      sourceRef:
        kind: HelmRepository
        name: grafana-charts
  install:
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
  values:
    controller:
      type: "daemonset"
      daemonset:
        tolerations:
          - effect: NoSchedule
            operator: Exists
          - key: "CriticalAddonsOnly"
            operator: "Exists"
      extraVolumeMounts:
        - name: varlog
          mountPath: /var/log
          readOnly: true
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
    extraVolumes:
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
    alloy:
      configMap:
        create: true
        content: |
          logging {
            level  = "info"
            format = "logfmt"
          }

          // 1. Discover all pods in the cluster
          discovery.kubernetes "pods" {
            role = "pod"
          }

          // 2. Relabel the discovered targets before scraping
          discovery.relabel "pods" {
            targets = discovery.kubernetes.pods.targets

            // Create a "namespace" label
            rule {
              source_labels = ["__meta_kubernetes_namespace"]
              target_label  = "namespace"
            }

            // Create an app label
            rule {
              source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
              target_label  = "app"
            }

            // Create a "component" label
            rule {
              source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_component"]
              target_label  = "component"
            }

            // Create a "pod" label
            rule {
              source_labels = ["__meta_kubernetes_pod_name"]
              target_label  = "pod"
            }

            // Create a "container" label
            rule {
              source_labels = ["__meta_kubernetes_pod_container_name"]
              target_label  = "container"
            }

            // Create the __path__ label to tell loki.source.kubernetes
            // where to find the log files on the node's filesystem.
            rule {
              source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
              separator     = "/"
              replacement   = "/var/log/pods/${1}/${2}/*.log"
              target_label  = "__path__"
            }
          }

          // 3. Scrape logs from the files specified by the __path__ label
          loki.source.kubernetes "pods" {
            targets    = discovery.relabel.pods.output
            forward_to = [loki.process.pods.receiver]
          }

          // 4. Perform any post-processing on the log entries
          loki.process "pods" {
            forward_to = [loki.write.default.receiver]

            stage.json {
              expressions = {
                level = "level",
              }
            }
          }

          // 5. Send the logs to Loki
          loki.write "default" {
            endpoint {
              url = "http://loki-gateway.monitoring.svc.cluster.local/loki/api/v1/push"
            }
          }
