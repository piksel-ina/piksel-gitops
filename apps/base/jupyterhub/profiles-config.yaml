apiVersion: v1
kind: ConfigMap
metadata:
  name: hub-profile-config
  namespace: jupyterhub
data:
  profiles.py: |
    from tornado import web
    import os

    async def get_user_groups(self, user):
        """Extract user groups from AWS Cognito authentication state"""
        try:
            # Retrieve user authentication info
            auth_state = await user.get_auth_state()
            self.log.info(f"Auth state for {user.name}: {auth_state}")
            
            # Extract Cognito groups from the token
            if auth_state and 'oauth_user' in auth_state:
                cognito_info = auth_state['oauth_user']
                groups = cognito_info.get('cognito:groups', [])
            elif auth_state and 'cognito:groups' in auth_state:
                groups = auth_state['cognito:groups']
            else:
                self.log.warning(f"Could not find cognito:groups for user {user.name}")
                groups = []
                
            self.log.info(f"User {user.name} belongs to groups: {groups}")
            return groups
            
        except Exception as e:
            self.log.error(f"Error retrieving groups for {user.name}: {e}")
            return []

    async def get_efs_volume_mounts(user_groups):
        """Generate EFS volume mounts based on user groups"""
        volume_mounts = []

        # Base public data mount for all users (read-only)
        volume_mounts.append({
            "name": "efs-public-data",
            "mountPath": "/home/jovyan/public",
            "readOnly": True
        })

        # Admin users get full read-write access to all EFS areas
        if 'admin' in user_groups:
            volume_mounts = [
                {
                    "name": "efs-public-data",
                    "mountPath": "/home/jovyan/public",
                    "readOnly": False
                },
                {
                    "name": "efs-coastline-data",
                    "mountPath": "/home/jovyan/coastline-data",
                    "readOnly": False
                }
            ]

        # Coastline-changes group gets read-write access to their specific area
        elif 'coastline-changes' in user_groups:
            volume_mounts.append({
                "name": "efs-coastline-data",
                "mountPath": "/home/jovyan/coastline-data",
                "readOnly": False
            })

        return volume_mounts

    def determine_efs_access_level(user_groups):
        """Determine EFS access level based on user groups""" 
        if 'admin' in user_groups:
            return "admin"
        elif 'coastline-changes' in user_groups:
            return "coastline-changes" 
        # Extend as needed
        else:
            return "public-readonly"


    async def custom_options_form(self):
        """Generate dynamic profile options based on user groups"""
        self.log.info(f"Generating profiles for user: {self.user.name}")
        
        # Base profiles for all users (Standard is already set as default)
        base_profiles = [
            {
                "display_name": "Standard Instance",
                "description": "2 CPUs, 12GB RAM, 10GB storage",
                "slug": "standard",
                "default": True,
                "kubespawner_override": {
                    "cpu_guarantee": 2,
                    "cpu_limit": 2,
                    "mem_guarantee": "12G",
                    "mem_limit": "12G",
                    "storage_capacity": "10Gi"
                }
            }
        ]
        
        # Power user profiles for admin/power users
        power_user_profiles = [
            {
                "display_name": "Medium Instance",
                "description": "4 CPUs, 16GB RAM, 20GB storage",
                "slug": "medium",
                "kubespawner_override": {
                    "cpu_guarantee": 4,
                    "cpu_limit": 4,
                    "mem_guarantee": "16G",
                    "mem_limit": "16G",
                    "storage_capacity": "20Gi"
                }
            },
            {
                "display_name": "Large Instance", 
                "description": "8 CPUs, 32GB RAM, 20GB storage",
                "slug": "large",
                "kubespawner_override": {
                    "cpu_guarantee": 8,
                    "cpu_limit": 8,
                    "mem_guarantee": "32G",
                    "mem_limit": "32G",
                    "storage_capacity": "20Gi"
                }
            },
            {
                "display_name": "GPU Instance",
                "description": "4 CPUs, 16GB RAM, 20GB storage, 1 NVIDIA GPU",
                "slug": "gpu",
                "kubespawner_override": {
                    "cpu_guarantee": 4,
                    "cpu_limit": 4,
                    "mem_guarantee": "16G", 
                    "mem_limit": "16G",
                    "storage_capacity": "20Gi",
                    "extra_resource_limits": {
                        "nvidia.com/gpu": "1"
                    },
                    "extra_resource_guarantees": {
                        "nvidia.com/gpu": "1"
                    },
                    "tolerations": [
                        {
                            "key": "nvidia.com/gpu",
                            "operator": "Exists",
                            "effect": "NoSchedule"
                        }
                    ],
                    "node_selector": {
                        "karpenter.sh/nodepool": "gpu"
                    }
                }
            }
        ]
        
        # Start with base profiles
        self.profile_list = base_profiles.copy()
        
        try:
            # Get user groups from Cognito
            user_groups = await get_user_groups(self, self.user)

            # Mount volumes based on user groups
            efs_volume_mounts = await get_efs_volume_mounts(user_groups)

            # Add the volume mounts to all profiles
            for profile in self.profile_list:
                if "kubespawner_override" not in profile:
                    profile["kubespawner_override"] = {}
                profile["kubespawner_override"]["extra_volume_mounts"] = efs_volume_mounts
            
            # Check if user is admin or in power user groups
            power_user_groups = ['admin', 'power-users']
            
            if any(group in user_groups for group in power_user_groups):
                self.log.info(f"User {self.user.name} is a power user, adding additional profiles")

                # Add EFS mounts to power user profiles
                for profile in power_user_profiles:
                    if "kubespawner_override" not in profile:
                        profile["kubespawner_override"] = {}
                    profile["kubespawner_override"]["extra_volume_mounts"] = efs_volume_mounts

                self.profile_list.extend(power_user_profiles)
            else:
                self.log.info(f"User {self.user.name} is a standard user, using base profiles only")

            efs_access_level = determine_efs_access_level(user_groups)
            
            # Set extra labels for tracking
            self.extra_labels = {
                "user-type": "power-user" if any(group in user_groups for group in power_user_groups) else "standard-user",
                "cognito-groups": ",".join(user_groups),
                "efs-access": efs_access_level
            }
            
            return self._options_form_default()      
            
        except Exception as e:
            self.log.error(f"Error in custom_options_form for {self.user.name}: {e}")
            # Fallback to base profiles if there's an error
            self.profile_list = base_profiles
            return self._options_form_default()

    # Apply the custom options form
    c.KubeSpawner.options_form = custom_options_form
    c.Spawner.debug = True
    c.JupyterHub.log_level = "INFO"
    # Set cookies to less than a day
    c.JupyterHub.cookie_max_age_days = 0.90
    c.JupyterHub.tornado_settings["cookie_options"] = dict(expires_days=0.90)
    c.LocalProcessSpawner.debug = True
