apiVersion: v1
kind: ConfigMap
metadata:
  name: db-user-creation-script
  namespace: database
data:
  create_users.sh: |
    #!/bin/bash
    set -e

    # Function to create database if it doesn't exist
    create_database_if_not_exists() {
        local db_name=$1
        
        echo "Checking/Creating database: $db_name"
        
        psql -h "$DB_HOST" -U "$DB_ADMIN_USER" -d postgres << EOF
    SELECT 'CREATE DATABASE $db_name' 
    WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '$db_name')\gexec
    EOF
        
        echo "Database $db_name is ready"
    }

    # Function to create or update user
    create_or_update_user() {
        local username=$1
        local password=$2
        local target_db=$3
        local permissions=$4
        
        echo "Processing user: $username for database: $target_db"
        
        # Create/update user in the main postgres database
        psql -h "$DB_HOST" -U "$DB_ADMIN_USER" -d postgres << EOF
    DO \$\$
    DECLARE
        user_exists boolean;
    BEGIN
        SELECT EXISTS(SELECT FROM pg_roles WHERE rolname = '$username') INTO user_exists;
        IF NOT user_exists THEN
            EXECUTE 'CREATE ROLE $username WITH LOGIN PASSWORD ' || quote_literal('$password');
            RAISE NOTICE 'Created user: $username';
        ELSE
            EXECUTE 'ALTER ROLE $username WITH PASSWORD ' || quote_literal('$password');
            RAISE NOTICE 'Updated password for user: $username';
        END IF;
    END \$\$;
    EOF

        # Grant permissions on the target database
        psql -h "$DB_HOST" -U "$DB_ADMIN_USER" -d "$target_db" << EOF
    GRANT CONNECT ON DATABASE $target_db TO $username;
    GRANT USAGE ON SCHEMA public TO $username;
    $permissions
    EOF
        
        echo "User $username processed for database $target_db"
    }

    echo "Starting database and user creation process..."

    # Create databases first
    create_database_if_not_exists "argo"
    create_database_if_not_exists "jupyterhub" 
    create_database_if_not_exists "grafana"
    create_database_if_not_exists "stac"  # shared by stac and stacread
    create_database_if_not_exists "odc"   # shared by odc and odcread

    # Create users with their specific permissions on their respective databases
    create_or_update_user "argo" "$ARGO_PASSWORD" "argo" "GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO argo; GRANT CREATE ON SCHEMA public TO argo;"

    create_or_update_user "jupyterhub" "$JUPYTERHUB_PASSWORD" "jupyterhub" "GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO jupyterhub; GRANT CREATE ON SCHEMA public TO jupyterhub;"

    create_or_update_user "grafana" "$GRAFANA_PASSWORD" "grafana" "GRANT SELECT ON ALL TABLES IN SCHEMA public TO grafana;"

    # STAC users share the same database
    create_or_update_user "stacread" "$STACREAD_PASSWORD" "stac" "GRANT SELECT ON ALL TABLES IN SCHEMA public TO stacread;"
    create_or_update_user "stac" "$STAC_PASSWORD" "stac" "GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO stac; GRANT CREATE ON SCHEMA public TO stac;"

    # ODC users share the same database  
    create_or_update_user "odcread" "$ODCREAD_PASSWORD" "odc" "GRANT SELECT ON ALL TABLES IN SCHEMA public TO odcread;"
    create_or_update_user "odc" "$ODC_PASSWORD" "odc" "GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO odc; GRANT CREATE ON SCHEMA public TO odc;"

    echo "Database and user creation process completed successfully!"

---
apiVersion: batch/v1
kind: Job
metadata:
  name: db-user-creation-job
  namespace: database
spec:
  template:
    spec:
      containers:
        - name: postgres-client
          image: alpine:3.22
          command:
            - /bin/sh
            - -c
            - |
              # Install packages
              apk add --no-cache bash curl postgresql-client

              # Check if PGPASSWORD needs base64 decoding (try decode, fallback to original)
              if echo "$PGPASSWORD" | base64 -d >/dev/null 2>&1; then
                  DECODED_PGPASSWORD=$(echo "$PGPASSWORD" | base64 -d)
                  echo "Admin password was base64 encoded, decoded successfully"
              else
                  DECODED_PGPASSWORD="$PGPASSWORD"
                  echo "Admin password is already plain text"
              fi
              export PGPASSWORD="$DECODED_PGPASSWORD"

              # User passwords - assume they are plain text (no base64 decoding)
              echo "Using user passwords as plain text (no base64 decoding)"

              # Download SSL cert
              curl -o /tmp/rds-ca.pem https://truststore.pki.rds.amazonaws.com/ap-southeast-3/ap-southeast-3-bundle.pem
              export PGSSLMODE=verify-ca
              export PGSSLROOTCERT=/tmp/rds-ca.pem

              # Copy script to writable location and run it
              cp /scripts/create_users.sh /tmp/create_users.sh
              chmod +x /tmp/create_users.sh
              /tmp/create_users.sh
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-password
                  key: password
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: db-password
                  key: db_address
            - name: DB_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: db-password
                  key: username
            - name: DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  name: db-password
                  key: db_name
            - name: ARGO_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: argo
                  key: password
            - name: JUPYTERHUB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jupyterhub
                  key: password
            - name: GRAFANA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana
                  key: password
            - name: STACREAD_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: stacread
                  key: password
            - name: STAC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: stac
                  key: password
            - name: ODCREAD_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: odcread
                  key: password
            - name: ODC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: odc
                  key: password
          volumeMounts:
            - name: script
              mountPath: /scripts
      volumes:
        - name: script
          configMap:
            name: db-user-creation-script
            defaultMode: 0755
      restartPolicy: OnFailure
